// Comparisons of simple collection types
bool result : true
void fail(string msg):
    "tc_compare05: FAIL: $msg"
    result = false
    
array arrayInt : uint32,3
sequence seqInt : uint32
list listInt : uint32

array{uint32,3} a1: 1, 2, 3
arrayInt a2: 1, 2, 4
sequence{uint32} s1: 1, 2, 3
seqInt s2: 1, 2, 4
seqInt s3: 1, 2, 3, 4
list{uint32} l1: 1, 2, 3
listInt l2: 1, 2, 4
listInt l3: 1, 2, 3, 4

// Array
if a1.compare(a2) != LT: fail("a1.compare(a2) (${a1.compare(a2)} != LT)")
if a2.compare(a1) != GT: fail("a2.compare(a1) (${a2.compare(a1)} != GT)")
if a1.compare(a1) != EQ: fail("a1.compare(a1) (${a1.compare(a1)} != EQ)")

// Sequence
if s1.compare(s2) != LT: fail("s1.compare(s2) (${s1.compare(s2)} != LT)")
if s2.compare(s1) != GT: fail("s2.compare(s1) (${s2.compare(s1)} != GT)")
if s1.compare(s1) != EQ: fail("s1.compare(s1) (${s1.compare(s1)} != EQ)")
if s1.compare(s3) != LT: fail("s1.compare(s3) (${s1.compare(s3)} != LT)")
if s3.compare(s1) != GT: fail("s3.compare(s1) (${s3.compare(s1)} != GT)")
if s2.compare(s3) != LT: fail("s2.compare(s3) (${s2.compare(s3)} != LT)")
if s3.compare(s2) != GT: fail("s3.compare(s2) (${s3.compare(s2)} != GT)")

// List
if l1.compare(l2) != LT: fail("l1.compare(l2) (${l1.compare(l2)} != LT)")
if l2.compare(l1) != GT: fail("l2.compare(l1) (${l2.compare(l1)} != GT)")
if l1.compare(l1) != EQ: fail("l1.compare(l1) (${l1.compare(l1)} != EQ)")
if l1.compare(l3) != LT: fail("l1.compare(l3) (${l1.compare(l3)} != LT)")
if l3.compare(l1) != GT: fail("l3.compare(l1) (${l3.compare(l1)} != GT)")
if l2.compare(l3) != LT: fail("l2.compare(l3) (${l2.compare(l3)} != LT)")
if l3.compare(l2) != GT: fail("l3.compare(l2) (${l3.compare(l2)} != GT)")

// Array <-> Sequence
if a1.compare(s2) != LT: fail("a1.compare(s2) (${a1.compare(s2)} != LT)")
if a2.compare(s1) != GT: fail("a2.compare(s1) (${a2.compare(s1)} != GT)")
if a1.compare(s1) != EQ: fail("a1.compare(s1) (${a1.compare(s1)} != EQ)")
if a1.compare(s3) != LT: fail("a1.compare(s3) (${a1.compare(s3)} != LT)")
if s3.compare(a1) != GT: fail("s3.compare(a1) (${s3.compare(a1)} != GT)")
if a2.compare(s3) != LT: fail("a2.compare(s3) (${a2.compare(s3)} != LT)")
if s3.compare(a2) != GT: fail("s3.compare(a2) (${s3.compare(a2)} != GT)")

// Array <-> List
if a1.compare(l2) != LT: fail("a1.compare(l2) (${a1.compare(l2)} != LT)")
if a2.compare(l1) != GT: fail("a2.compare(l1) (${a2.compare(l1)} != GT)")
if a1.compare(l1) != EQ: fail("a1.compare(l1) (${a1.compare(l1)} != EQ)")
if a1.compare(l3) != LT: fail("a1.compare(l3) (${a1.compare(l3)} != LT)")
if l3.compare(a1) != GT: fail("l3.compare(a1) (${l3.compare(a1)} != GT)")
if a2.compare(l3) != LT: fail("a2.compare(l3) (${a2.compare(l3)} != LT)")
if l3.compare(a2) != GT: fail("l3.compare(a2) (${l3.compare(a2)} != GT)")

// List <-> Sequence
if l1.compare(s2) != LT: fail("l1.compare(s2) (${l1.compare(s2)} != LT)")
if l2.compare(s1) != GT: fail("l2.compare(s1) (${l2.compare(s1)} != GT)")
if l1.compare(s1) != EQ: fail("l1.compare(s1) (${l1.compare(s1)} != EQ)")
if l1.compare(s3) != LT: fail("l1.compare(s3) (${l1.compare(s3)} != LT)")
if l3.compare(s1) != GT: fail("l3.compare(s1) (${l3.compare(s1)} != GT)")
if l2.compare(s3) != LT: fail("l2.compare(s3) (${l2.compare(s3)} != LT)")
if l3.compare(s2) != GT: fail("l3.compare(s2) (${l3.compare(s2)} != GT)")

if result: "tc_compare05: OK"
    