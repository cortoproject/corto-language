/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : Cortolang.g
 *     -                            On : 2016-06-07 22:03:53
 *     -                for the parser : CortolangParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser 
CortolangParser

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pCortolangParser, which is returned from a call to CortolangParserNew().
 *
 * The methods in pCortolangParser are  as follows:
 *
 *  - 
 parser_ProgramNode ___
      pCortolangParser->program(pCortolangParser)
 *  - 
 parser_StatementNode ___
      pCortolangParser->statement(pCortolangParser)
 *  - 
 parser_StatementNode ___
      pCortolangParser->declarativeStatement(pCortolangParser)
 *  - 
 parser_StatementNode ___
      pCortolangParser->simpleStatement(pCortolangParser)
 *  - 
 void
      pCortolangParser->compositeStatement(pCortolangParser)
 *  - 
 parser_StatementNode ___
      pCortolangParser->block(pCortolangParser)
 *  - 
 parser_StatementNode ___
      pCortolangParser->declarationExt(pCortolangParser)
 *  - 
 corto_ll ___
      pCortolangParser->declarationNameList(pCortolangParser)
 *  - 
 parser_ObjectDeclarationNameNode ___
      pCortolangParser->declarationName(pCortolangParser)
 *  - 
 parser_FullCommaExpressionNode ___
      pCortolangParser->initializer(pCortolangParser)
 *  - 
 corto_bool ___
      pCortolangParser->scopeOp(pCortolangParser)
 *  - 
 parser_ScopeNode ___
      pCortolangParser->scope_(pCortolangParser)
 *  - 
 parser_StatementNode ___
      pCortolangParser->functionDeclaration(pCortolangParser)
 *  - 
 corto_ll ___
      pCortolangParser->functionParameters(pCortolangParser)
 *  - 
 parser_FunctionParameterNode ___
      pCortolangParser->functionParameter(pCortolangParser)
 *  - 
 void
      pCortolangParser->ifStatement(pCortolangParser)
 *  - 
 void
      pCortolangParser->elseStatement(pCortolangParser)
 *  - 
 void
      pCortolangParser->whileStatement(pCortolangParser)
 *  - 
 void
      pCortolangParser->breakStatement(pCortolangParser)
 *  - 
 void
      pCortolangParser->continueStatement(pCortolangParser)
 *  - 
 parser_ExpressionNode ___
      pCortolangParser->expression(pCortolangParser)
 *  - 
 parser_ExpressionNode ___
      pCortolangParser->assignmentExpression(pCortolangParser)
 *  - 
 parser_ExpressionNode ___
      pCortolangParser->simpleCommaExpression(pCortolangParser)
 *  - 
 parser_FullCommaExpressionNode ___
      pCortolangParser->fullCommaExpression(pCortolangParser)
 *  - 
 parser_FullCommaExpressionElementNode ___
      pCortolangParser->commaExpressionElem(pCortolangParser)
 *  - 
 parser_ExpressionNode ___
      pCortolangParser->conditionalExpression(pCortolangParser)
 *  - 
 parser_ExpressionNode ___
      pCortolangParser->logicOrExpression(pCortolangParser)
 *  - 
 parser_ExpressionNode ___
      pCortolangParser->logicAndExpression(pCortolangParser)
 *  - 
 parser_ExpressionNode ___
      pCortolangParser->equalityExpression(pCortolangParser)
 *  - 
 parser_ExpressionNode ___
      pCortolangParser->comparisonExpression(pCortolangParser)
 *  - 
 parser_ExpressionNode ___
      pCortolangParser->bitOrExpression(pCortolangParser)
 *  - 
 parser_ExpressionNode ___
      pCortolangParser->bitXorExpression(pCortolangParser)
 *  - 
 parser_ExpressionNode ___
      pCortolangParser->bitAndExpression(pCortolangParser)
 *  - 
 parser_ExpressionNode ___
      pCortolangParser->shiftExpression(pCortolangParser)
 *  - 
 parser_ExpressionNode ___
      pCortolangParser->addExpression(pCortolangParser)
 *  - 
 parser_ExpressionNode ___
      pCortolangParser->multExpression(pCortolangParser)
 *  - 
 parser_ExpressionNode ___
      pCortolangParser->unaryExpression(pCortolangParser)
 *  - 
 parser_ExpressionNode ___
      pCortolangParser->postfixExpression(pCortolangParser)
 *  - 
 parser_ExpressionNode ___
      pCortolangParser->atomExpression(pCortolangParser)
 *  - 
 void
      pCortolangParser->anonymousObject(pCortolangParser)
 *  - 
 void
      pCortolangParser->observerStatement(pCortolangParser)
 *  - 
 void
      pCortolangParser->eventMask(pCortolangParser)
 *  - 
 void
      pCortolangParser->eventFlag(pCortolangParser)
 *  - 
 void
      pCortolangParser->eventBaseFlag(pCortolangParser)
 *  - 
 void
      pCortolangParser->eventScopeFlag(pCortolangParser)
 *  - 
 corto_operatorKind ___ ___
      pCortolangParser->assignmentOp(pCortolangParser)
 *  - 
 corto_operatorKind ___
      pCortolangParser->eqOp(pCortolangParser)
 *  - 
 corto_operatorKind ___
      pCortolangParser->comparisonOp(pCortolangParser)
 *  - 
 corto_operatorKind ___
      pCortolangParser->shiftOp(pCortolangParser)
 *  - 
 corto_operatorKind ___
      pCortolangParser->addOp(pCortolangParser)
 *  - 
 corto_operatorKind ___
      pCortolangParser->multOp(pCortolangParser)
 *  - 
 corto_operatorKind ___
      pCortolangParser->unaryOp(pCortolangParser)
 *  - 
 parser_ExpressionNode ___
      pCortolangParser->postfixOperation(pCortolangParser)
 *  - 
 parser_ExpressionNode ___
      pCortolangParser->functionCall(pCortolangParser)
 *  - 
 parser_ExpressionNode ___
      pCortolangParser->memberAccess(pCortolangParser)
 *  - 
 parser_ExpressionNode ___
      pCortolangParser->elementAccess(pCortolangParser)
 *  - 
 void
      pCortolangParser->constant(pCortolangParser)
 *  - 
 CortolangParser_identifier_return
      pCortolangParser->identifier(pCortolangParser)
 *  - 
 parser_BaseTypeExpressionNode ___
      pCortolangParser->typeLabel(pCortolangParser)
 *  - 
 parser_LiteralNode ___
      pCortolangParser->literal(pCortolangParser)
 *  - 
 parser_LiteralNode ___
      pCortolangParser->booleanLiteral(pCortolangParser)
 *  - 
 parser_LiteralNode ___
      pCortolangParser->integerLiteral(pCortolangParser)
 * 
 * 
 * 
 * 
 * 
 * 
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_CortolangParser_H
#define _CortolangParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#include "CortolangParserWrapper.h"

#define CHARS(text) ((char*)text->chars)


#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct CortolangParser_Ctx_struct CortolangParser, * pCortolangParser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */

typedef struct CortolangParser_identifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
}
    CortolangParser_identifier_return;





/** Context tracking structure for 
CortolangParser

 */
struct CortolangParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;

     parser_ProgramNode ___
     (*program)	(struct CortolangParser_Ctx_struct * ctx);

     parser_StatementNode ___
     (*statement)	(struct CortolangParser_Ctx_struct * ctx);

     parser_StatementNode ___
     (*declarativeStatement)	(struct CortolangParser_Ctx_struct * ctx);

     parser_StatementNode ___
     (*simpleStatement)	(struct CortolangParser_Ctx_struct * ctx);

     void
     (*compositeStatement)	(struct CortolangParser_Ctx_struct * ctx);

     parser_StatementNode ___
     (*block)	(struct CortolangParser_Ctx_struct * ctx);

     parser_StatementNode ___
     (*declarationExt)	(struct CortolangParser_Ctx_struct * ctx);

     corto_ll ___
     (*declarationNameList)	(struct CortolangParser_Ctx_struct * ctx);

     parser_ObjectDeclarationNameNode ___
     (*declarationName)	(struct CortolangParser_Ctx_struct * ctx);

     parser_FullCommaExpressionNode ___
     (*initializer)	(struct CortolangParser_Ctx_struct * ctx);

     corto_bool ___
     (*scopeOp)	(struct CortolangParser_Ctx_struct * ctx);

     parser_ScopeNode ___
     (*scope_)	(struct CortolangParser_Ctx_struct * ctx);

     parser_StatementNode ___
     (*functionDeclaration)	(struct CortolangParser_Ctx_struct * ctx);

     corto_ll ___
     (*functionParameters)	(struct CortolangParser_Ctx_struct * ctx);

     parser_FunctionParameterNode ___
     (*functionParameter)	(struct CortolangParser_Ctx_struct * ctx);

     void
     (*ifStatement)	(struct CortolangParser_Ctx_struct * ctx);

     void
     (*elseStatement)	(struct CortolangParser_Ctx_struct * ctx);

     void
     (*whileStatement)	(struct CortolangParser_Ctx_struct * ctx);

     void
     (*breakStatement)	(struct CortolangParser_Ctx_struct * ctx);

     void
     (*continueStatement)	(struct CortolangParser_Ctx_struct * ctx);

     parser_ExpressionNode ___
     (*expression)	(struct CortolangParser_Ctx_struct * ctx);

     parser_ExpressionNode ___
     (*assignmentExpression)	(struct CortolangParser_Ctx_struct * ctx);

     parser_ExpressionNode ___
     (*simpleCommaExpression)	(struct CortolangParser_Ctx_struct * ctx);

     parser_FullCommaExpressionNode ___
     (*fullCommaExpression)	(struct CortolangParser_Ctx_struct * ctx);

     parser_FullCommaExpressionElementNode ___
     (*commaExpressionElem)	(struct CortolangParser_Ctx_struct * ctx);

     parser_ExpressionNode ___
     (*conditionalExpression)	(struct CortolangParser_Ctx_struct * ctx);

     parser_ExpressionNode ___
     (*logicOrExpression)	(struct CortolangParser_Ctx_struct * ctx);

     parser_ExpressionNode ___
     (*logicAndExpression)	(struct CortolangParser_Ctx_struct * ctx);

     parser_ExpressionNode ___
     (*equalityExpression)	(struct CortolangParser_Ctx_struct * ctx);

     parser_ExpressionNode ___
     (*comparisonExpression)	(struct CortolangParser_Ctx_struct * ctx);

     parser_ExpressionNode ___
     (*bitOrExpression)	(struct CortolangParser_Ctx_struct * ctx);

     parser_ExpressionNode ___
     (*bitXorExpression)	(struct CortolangParser_Ctx_struct * ctx);

     parser_ExpressionNode ___
     (*bitAndExpression)	(struct CortolangParser_Ctx_struct * ctx);

     parser_ExpressionNode ___
     (*shiftExpression)	(struct CortolangParser_Ctx_struct * ctx);

     parser_ExpressionNode ___
     (*addExpression)	(struct CortolangParser_Ctx_struct * ctx);

     parser_ExpressionNode ___
     (*multExpression)	(struct CortolangParser_Ctx_struct * ctx);

     parser_ExpressionNode ___
     (*unaryExpression)	(struct CortolangParser_Ctx_struct * ctx);

     parser_ExpressionNode ___
     (*postfixExpression)	(struct CortolangParser_Ctx_struct * ctx);

     parser_ExpressionNode ___
     (*atomExpression)	(struct CortolangParser_Ctx_struct * ctx);

     void
     (*anonymousObject)	(struct CortolangParser_Ctx_struct * ctx);

     void
     (*observerStatement)	(struct CortolangParser_Ctx_struct * ctx);

     void
     (*eventMask)	(struct CortolangParser_Ctx_struct * ctx);

     void
     (*eventFlag)	(struct CortolangParser_Ctx_struct * ctx);

     void
     (*eventBaseFlag)	(struct CortolangParser_Ctx_struct * ctx);

     void
     (*eventScopeFlag)	(struct CortolangParser_Ctx_struct * ctx);

     corto_operatorKind ___ ___
     (*assignmentOp)	(struct CortolangParser_Ctx_struct * ctx);

     corto_operatorKind ___
     (*eqOp)	(struct CortolangParser_Ctx_struct * ctx);

     corto_operatorKind ___
     (*comparisonOp)	(struct CortolangParser_Ctx_struct * ctx);

     corto_operatorKind ___
     (*shiftOp)	(struct CortolangParser_Ctx_struct * ctx);

     corto_operatorKind ___
     (*addOp)	(struct CortolangParser_Ctx_struct * ctx);

     corto_operatorKind ___
     (*multOp)	(struct CortolangParser_Ctx_struct * ctx);

     corto_operatorKind ___
     (*unaryOp)	(struct CortolangParser_Ctx_struct * ctx);

     parser_ExpressionNode ___
     (*postfixOperation)	(struct CortolangParser_Ctx_struct * ctx, parser_ExpressionNode ___ _node);

     parser_ExpressionNode ___
     (*functionCall)	(struct CortolangParser_Ctx_struct * ctx, parser_ExpressionNode ___ _node);

     parser_ExpressionNode ___
     (*memberAccess)	(struct CortolangParser_Ctx_struct * ctx, parser_ExpressionNode ___ _node);

     parser_ExpressionNode ___
     (*elementAccess)	(struct CortolangParser_Ctx_struct * ctx, parser_ExpressionNode ___ _node);

     void
     (*constant)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_identifier_return
     (*identifier)	(struct CortolangParser_Ctx_struct * ctx);

     parser_BaseTypeExpressionNode ___
     (*typeLabel)	(struct CortolangParser_Ctx_struct * ctx);

     parser_LiteralNode ___
     (*literal)	(struct CortolangParser_Ctx_struct * ctx);

     parser_LiteralNode ___
     (*booleanLiteral)	(struct CortolangParser_Ctx_struct * ctx);

     parser_LiteralNode ___
     (*integerLiteral)	(struct CortolangParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred1_Cortolang)	(struct CortolangParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred2_Cortolang)	(struct CortolangParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred3_Cortolang)	(struct CortolangParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred4_Cortolang)	(struct CortolangParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred5_Cortolang)	(struct CortolangParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred6_Cortolang)	(struct CortolangParser_Ctx_struct * ctx);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct CortolangParser_Ctx_struct * ctx);
    void	    (*free)   (struct CortolangParser_Ctx_struct * ctx);

    struct parser_data* parser_data;

};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pCortolangParser CortolangParserNew         (
pANTLR3_COMMON_TOKEN_STREAM
 instream);
ANTLR3_API pCortolangParser CortolangParserNewSSD      (
pANTLR3_COMMON_TOKEN_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
parser
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define AMPERSAND      4
#define AMP_EQUAL      5
#define ASTERISK      6
#define CHARACTER      7
#define COLON      8
#define COLON_EQUAL      9
#define COMMA      10
#define DEDENT      11
#define DIGIT      12
#define DIV_EQUAL      13
#define DOT      14
#define DOUBLE_COLON      15
#define EMARK      16
#define EQUAL      17
#define EQUALS      18
#define ESC      19
#define GID      20
#define GREATER_THAN      21
#define GREATER_THAN_EQUAL      22
#define HAT      23
#define HAT_EQUAL      24
#define IMPLICIT_LINE_WHITESPACE      25
#define INDENT      26
#define INTEGER      27
#define KW_AND      28
#define KW_BREAK      29
#define KW_CONTINUE      30
#define KW_DECLARE      31
#define KW_DEFINE      32
#define KW_DESTRUCT      33
#define KW_ELSE      34
#define KW_FALSE      35
#define KW_FOR      36
#define KW_IF      37
#define KW_NOT      38
#define KW_ON      39
#define KW_OR      40
#define KW_SCOPE      41
#define KW_SELF      42
#define KW_SYNCHRONIZED      43
#define KW_TREE      44
#define KW_TRUE      45
#define KW_UPDATE      46
#define KW_WAIT      47
#define KW_WHILE      48
#define LBRACE      49
#define LBRACK      50
#define LEADING_WHITESPACE      51
#define LESS_THAN      52
#define LESS_THAN_EQUAL      53
#define LETTER_UNDERSCORE      54
#define LPAREN      55
#define LSHIFT      56
#define LSHIFT_EQUALS      57
#define MINUS      58
#define MINUS_EQUAL      59
#define MOD_EQUAL      60
#define NEWLINE      61
#define NOT_EQUALS      62
#define PIPE      63
#define PIPE_EQUAL      64
#define PLUS      65
#define PLUS_EQUAL      66
#define QMARK      67
#define RBRACE      68
#define RBRACK      69
#define RPAREN      70
#define RSHIFT      71
#define RSHIFT_EQUALS      72
#define SLASH      73
#define STRING      74
#define TILDE      75
#define TIMES_EQUAL      76
#define TRIPLE_COLON      77
#define VALID_NAME      78
#define WHITESPACE      79
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for CortolangParser
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
