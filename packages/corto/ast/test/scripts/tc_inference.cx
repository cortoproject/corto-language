bool result : true

void fail(string msg):
    "tc_inference: FAIL: $msg"
    result = false

enum Color:: RED, YELLOW, GREEN, BLUE

octet a : 0
word b : 0
uint8 c : 0
uint16 d : 0
uint32 e : 0
uint64 f : 0
int8 g : 0
int16 h : 0
int32 i : 0
int64 j : 0
float32 k : 0
float64 l : 0
string m : "foo"
Color n : GREEN
int32 o : 0

var lang::type t

// Inference with integer literal
t = (a=1).typeof() 
if t != lang::octet: fail("octet/uint inference failed (${t.nameof()})")

t = (b=1).typeof() 
if t != lang::word: fail("word/uint inference failed (${t.nameof()})")

t = (c=1).typeof() 
if t != lang::uint8: fail("uint8/uint inference failed (${t.nameof()})")    

t = (d=1).typeof() 
if t != lang::uint16: fail("uint16/uint inference failed (${t.nameof()})")    

t = (e=1).typeof() 
if t != lang::uint32: fail("uint32/uint inference failed (${t.nameof()})")    

t = (f=1).typeof() 
if t != lang::uint64: fail("uint64/uint inference failed (${t.nameof()})")    

t = (g=1).typeof() 
if t != lang::int8: fail("int8/uint inference failed (${t.nameof()})")    

t = (h=1).typeof() 
if t != lang::int16: fail("int16/uint inference failed (${t.nameof()})")    

t = (i=1).typeof() 
if t != lang::int32: fail("int32/uint inference failed (${t.nameof()})")    

t = (j=1).typeof() 
if t != lang::int64: fail("int64/uint inference failed (${t.nameof()})")

t = (k=1).typeof() 
if t != lang::float32: fail("float32/uint inference failed (${t.nameof()})")    

t = (l=1).typeof() 
if t != lang::float64: fail("float64/uint inference failed (${t.nameof()})")    

t = (m=1).typeof() 
if t != lang::string: fail("string/uint inference failed (${t.nameof()})")

t = (n=1).typeof() 
if t != Color: fail("enum/uint inference failed (${t.nameof()})")


// Inference with negative integer literal
t = (a= -1).typeof() 
if t != lang::octet: fail("octet/int inference failed (${t.nameof()})")

t = (b= -1).typeof() 
if t != lang::word: fail("word/int inference failed (${t.nameof()})")

t = (c= -1).typeof() 
if t != lang::uint8: fail("uint8/int inference failed (${t.nameof()})")    

t = (d= -1).typeof() 
if t != lang::uint16: fail("uint16/int inference failed (${t.nameof()})")    

t = (e= -1).typeof() 
if t != lang::uint32: fail("uint32/int inference failed (${t.nameof()})")    

t = (f= -1).typeof() 
if t != lang::uint64: fail("uint64/int inference failed (${t.nameof()})")

t = (g= -1).typeof() 
if t != lang::int8: fail("int8/int inference failed (${t.nameof()})")    

t = (h= -1).typeof() 
if t != lang::int16: fail("int16/int inference failed (${t.nameof()})")    

t = (i= -1).typeof() 
if t != lang::int32: fail("int32/int inference failed (${t.nameof()})")    

t = (j= -1).typeof() 
if t != lang::int64: fail("int64/int inference failed (${t.nameof()})")

t = (k= -1).typeof() 
if t != lang::float32: fail("float32/int inference failed (${t.nameof()})")    

t = (l= -1).typeof() 
if t != lang::float64: fail("float64/int inference failed (${t.nameof()})")

t = (m= -1).typeof() 
if t != lang::string: fail("string/int inference failed (${t.nameof()})")

t = (n= -1).typeof() 
if t != Color: fail("enum/int inference failed (${t.nameof()})")    


// Inference with float literal
t = (a=1.1).typeof() 
if t != lang::octet: fail("octet/float inference failed (${t.nameof()})")

t = (b=1.1).typeof() 
if t != lang::word: fail("word/float inference failed (${t.nameof()})")

t = (c=1.1).typeof() 
if t != lang::uint8: fail("uint8/float inference failed (${t.nameof()})")    

t = (d=1.1).typeof() 
if t != lang::uint16: fail("uint16/float inference failed (${t.nameof()})")    

t = (e=1.1).typeof() 
if t != lang::uint32: fail("uint32/float inference failed (${t.nameof()})")    

t = (f=1.1).typeof() 
if t != lang::uint64: fail("uint64/float inference failed (${t.nameof()})")    

t = (g=1.1).typeof() 
if t != lang::int8: fail("int8/float inference failed (${t.nameof()})")    

t = (h=1.1).typeof() 
if t != lang::int16: fail("int16/float inference failed (${t.nameof()})")    

t = (i=1.1).typeof() 
if t != lang::int32: fail("int32/float inference failed (${t.nameof()})")    

t = (j=1.1).typeof() 
if t != lang::int64: fail("int64/float inference failed (${t.nameof()})")

t = (k=1.1).typeof() 
if t != lang::float32: fail("float32/float inference failed (${t.nameof()})")    

t = (l=1.1).typeof() 
if t != lang::float64: fail("float64/float inference failed (${t.nameof()})")

t = (m=1.1).typeof() 
if t != lang::string: fail("string/float inference failed (${t.nameof()})")

// float to enum is illegal

// Inference with string literal
t = (a="1").typeof() 
if t != lang::octet: fail("octet/string inference failed (${t.nameof()})")

t = (b="1").typeof() 
if t != lang::word: fail("word/string inference failed (${t.nameof()})")

t = (c="1").typeof() 
if t != lang::uint8: fail("uint8/string inference failed (${t.nameof()})")    

t = (d="1").typeof() 
if t != lang::uint16: fail("uint16/string inference failed (${t.nameof()})")    

t = (e="1").typeof() 
if t != lang::uint32: fail("uint32/string inference failed (${t.nameof()})")    

t = (f="1").typeof() 
if t != lang::uint64: fail("uint64/string inference failed (${t.nameof()})")    

t = (g="1").typeof() 
if t != lang::int8: fail("int8/string inference failed (${t.nameof()})")    

t = (h="1").typeof() 
if t != lang::int16: fail("int16/string inference failed (${t.nameof()})")

t = (i="1").typeof() 
if t != lang::int32: fail("int32/string inference failed (${t.nameof()})")    

t = (j="1").typeof() 
if t != lang::int64: fail("int64/string inference failed (${t.nameof()})")

t = (k="1").typeof() 
if t != lang::float32: fail("float32/string inference failed (${t.nameof()})")    

t = (l="1").typeof() 
if t != lang::float64: fail("float64/string inference failed (${t.nameof()})")

t = (m="1").typeof() 
if t != lang::string: fail("string/string inference failed (${t.nameof()})")

t = (n="1").typeof() 
if t != Color: fail("enum/string inference failed (${t.nameof()})")


// Inference between small and large integers
t = (c=d).typeof() 
if t != lang::uint8: fail("uint8=uint16 inference failed (${t.nameof()})")

t = (d=c).typeof() 
if t != lang::uint16: fail("uint16=uint8 inference failed (${t.nameof()})")

t = (c+d).typeof() 
if t != lang::uint16: fail("uint8+uint16 inference failed (${t.nameof()})")


// Inference between signed and unsigned integers (considered equal, thus left-hand type is selected)
t = (c=g).typeof() 
if t != lang::uint8: fail("uint8=int8 inference failed (${t.nameof()})")

t = (g=c).typeof() 
if t != lang::int8: fail("int8=uint8 inference failed (${t.nameof()})")


// Inference between integer and float
t = (e=k).typeof() 
if t != lang::uint32: fail("uint32=float32 inference failed (${t.nameof()})")

t = (k=e).typeof() 
if t != lang::float32: fail("float32=uint32 inference failed (${t.nameof()})")

t = (e+k).typeof() 
if t != lang::float32: fail("uint32+float32 inference failed (${t.nameof()})")


// Inference between integer and string
t = (e=m).typeof() 
if t != lang::uint32: fail("uint32=string inference failed (${t.nameof()})")

t = (m=e).typeof() 
if t != lang::string: fail("string=uint32 inference failed (${t.nameof()})")

t = (e+m).typeof() 
if t != lang::string: fail("uint32+string inference failed (${t.nameof()})")


// Inference between integer and enumeration
t = (o=n).typeof() 
if t != int32: fail("int32=enum inference failed (${t.nameof()})")

t = (n=o).typeof() 
if t != Color: fail("enum=int32 inference failed (${t.nameof()})")

t = (o+n).typeof()
if t != int32: fail("int32+enum inference failed (${t.nameof()})")

if result: "tc_inference: OK"
