// Test functions with complex returntypes and parameters
bool result: true
void fail(string msg):
    "tc_function04: FAIL: $msg"
    result = false

struct Point::
    x, y: uint32

Point p:;
Point q: 10,20
Point r: 30,40
var Point s = {50, 60}
var Point t = {70, 80}

// Assign result to return variable
Point add(Point a, Point b):
    add.x = a.x + b.x
    add.y = a.y + b.y

// Test with object 
p = add(q, r)
if p[x, y] != (40,60): fail("p[x,y] != (40,60) ($p)")

// Test with variables
p = add(s, t)
if p[x, y] != (120, 140): fail("p[x,y] != (120,140) ($p)")

// Test with initializers
p = add({90,100}, {110,120})
if p[x, y] != (200, 220): fail("p[x,y] != (200, 220) ($p)")

// Assign result as initializer expression
Point mul(Point a, Point b) = {a.x * b.x, a.y * b.y}

// Test with object 
p = mul(q, r)
if p[x, y] != (300,800): fail("p[x,y] != (300,800) ($p)")

// Test with variables
p = mul(s, t)
if p[x, y] != (3500, 4800): fail("p[x,y] != (3500,4800) ($p)")

// Test with initializers
p = mul({90,100}, {110,120})
if p[x, y] != (9900, 12000): fail("p[x,y] != (9900, 12000) ($p)")

if result: "tc_function04: OK"
