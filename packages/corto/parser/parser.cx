#package /corto/parser

// ============
// Forward Declarations
// ============

class ProgramNode
class StatementNode
class ExpressionNode
class FullCommaExpressionNode
class FullCommaExpressionElementNode
class BaseTypeExpressionNode

list StatementList: StatementNode
list ExpressionList: ExpressionNode
list FullCommaExpressionElementList: FullCommaExpressionElementNode


// ============
// Parser
// ============

class BaseParser::

    success: bool, readonly
    programReturn: ProgramNode, readonly

    int16 parse(string text)
    int16 parseFile(string filename)
    void displayRecognitionError(word recognizer, word tokenNames) virtual


class SimpleParser: BaseParser::
    errors: list{string}, hidden

    void displayRecognitionError(word recognizer, word tokenNames)


// ============
// Node
// ============

enum valueKind::
    Bool
    Char
    Int
    SignedInt
    Float
    Text
    Enum
    Ref
    Nothing

class Node::
    line: uint32
    column: uint32


class ProgramNode: Node::
    statements: StatementList


class StatementNode: Node


class ExpressionStatementNode: StatementNode::
    expression: ExpressionNode


class BlockNode: StatementNode::
    statements: StatementList


class ScopeNode: Node::
    statements: StatementList
    isPostScope: bool


// Declarations

class FunctionParameterNode: Node::
    typeLabel: BaseTypeExpressionNode
    name: string


list FunctionParameterList: FunctionParameterNode


class FunctionDeclarationNode: StatementNode::
    typeLabel: BaseTypeExpressionNode
    name: string
    parameters: FunctionParameterList
    block: BlockNode


// Expressions


class ExpressionNode: Node::
    type_: /corto/lang/type, readonly
    isReference: bool, readonly
    word getValue() virtual


class BinaryExpressionNode: ExpressionNode::
    left: ExpressionNode
    operator: operatorKind
    right: ExpressionNode


class CommaExpressionNode: ExpressionNode::
    expressions: ExpressionList


class ConditionalExpressionNode: ExpressionNode::
    condition: ExpressionNode
    trueValue: ExpressionNode
    falseValue: ExpressionNode


class UnaryExpressionNode: ExpressionNode::
    operator: operatorKind
    expression: ExpressionNode


class PostfixExpressionNode: ExpressionNode


class MemberExpressionNode: ExpressionNode::
    owner: ExpressionNode
    member: string


class CallExpressionNode: ExpressionNode::
    caller: ExpressionNode
    arguments: FullCommaExpressionNode // TODO put a FullCommaExpression


class ElementExpressionNode: ExpressionNode::
    owner: ExpressionNode
    elements: Node


class LiteralNode: ExpressionNode::
    word getValue() virtual


class BooleanLiteralNode: LiteralNode::
    int16 construct()
    value: bool
    word getValue()

class IntegerLiteralNode: LiteralNode::
    int16 construct()
    value: uint64
    word getValue()


class IdentifierNode: ExpressionNode::
    name: string


class FullCommaExpressionElementNode: Node::
    key: ExpressionNode
    value: ExpressionNode


class FullCommaExpressionNode: Node::
    elements: FullCommaExpressionElementList


class InitializerCommaExpressionNode: FullCommaExpressionNode


// E.g. MyType; MyType{a}, MyType{a}{b}
class BaseTypeExpressionNode: Node::
    type_: corto/lang/type, readonly


class SimpleTypeExpressionNode: BaseTypeExpressionNode::
    name: string


class InitializerTypeExpressionNode: BaseTypeExpressionNode::
    type: BaseTypeExpressionNode
    arguments: FullCommaExpressionNode


class ObjectDeclarationNameNode: Node::
    name: string
    arguments: FullCommaExpressionNode
    o: object, readonly


list ObjectDeclarationNameList: ObjectDeclarationNameNode


class ObjectDeclarationNode: StatementNode::
    typeLabel: BaseTypeExpressionNode
    declarations: ObjectDeclarationNameList
    initializer: FullCommaExpressionNode
    scope_: ScopeNode



// ============
// Visitor
// ============

class BaseVisitor::
    parser: baseParser

    int16 construct()
    void destruct()

    object visit() virtual

    object visitProgramNode(ProgramNode node, word data) virtual

    object visitStatementNode(StatementNode node, word data) virtual
    object visitExpressionStatementNode(ExpressionStatementNode node, word data) virtual
    object visitFunctionDeclarationNode(FunctionDeclarationNode node, word data) virtual
    object visitBlockNode(BlockNode node, word data) virtual
    object visitObjectDeclarationNode(ObjectDeclarationNode node, word data) virtual
    object visitObjectDeclarationNameNode(ObjectDeclarationNameNode node, word data) virtual
    object visitBaseTypeExpressionNode(BaseTypeExpressionNode node, word data) virtual
    object visitSimpleTypeExpressionNode(SimpleTypeExpressionNode node, word data) virtual
    object visitInitializerTypeExpressionNode(InitializerTypeExpressionNode node, word data) virtual
    object visitFunctionParameterNode(FunctionParameterNode node, word data) virtual

    object visitScopeNode(ScopeNode node, word data) virtual

    object visitExpressionNode(ExpressionNode node, word data) virtual
    object visitBinaryExpressionNode(BinaryExpressionNode node, word data) virtual
    object visitCommaExpressionNode(CommaExpressionNode node, word data) virtual
    object visitConditionalExpressionNode(ConditionalExpressionNode node, word data) virtual
    object visitUnaryExpressionNode(UnaryExpressionNode node, word data) virtual
    object visitMemberExpressionNode(MemberExpressionNode node, word data) virtual
    object visitCallExpressionNode(CallExpressionNode node, word data) virtual
    object visitElementExpressionNode(ElementExpressionNode node, word data) virtual

    object visitFullCommaExpressionNode(FullCommaExpressionNode node, word data) virtual
    object visitFullCommaExpressionElementNode(FullCommaExpressionElementNode node, word data) virtual

    object visitLiteralNode(LiteralNode node, word data) virtual
    object visitIdentifierNode(IdentifierNode node, word data) virtual


class PrintVisitor: BaseVisitor::
    buffer: word, private
    level: uint32, private

    int16 construct()
    void destruct()

    object visitProgramNode(ProgramNode node, word data) virtual

    object visitStatementNode(StatementNode node, word data) virtual
    object visitFunctionDeclarationNode(FunctionDeclarationNode node, word data) virtual
    object visitBlockNode(BlockNode node, word data) virtual
    object visitObjectDeclarationNode(ObjectDeclarationNode node, word data) virtual
    object visitObjectDeclarationNameNode(ObjectDeclarationNameNode node, word data) virtual
    object visitSimpleTypeExpressionNode(SimpleTypeExpressionNode node, word data) virtual
    object visitInitializerTypeExpressionNode(InitializerTypeExpressionNode node, word data) virtual
    object visitFunctionParameterNode(FunctionParameterNode node, word data) virtual
    object visitScopeNode(ScopeNode node, word data) virtual

    object visitExpressionNode(ExpressionNode node, word data) virtual
    object visitBinaryExpressionNode(BinaryExpressionNode node, word data) virtual
    object visitCommaExpressionNode(CommaExpressionNode node, word data) virtual
    object visitConditionalExpressionNode(ConditionalExpressionNode node, word data) virtual
    object visitUnaryExpressionNode(UnaryExpressionNode node, word data) virtual
    object visitMemberExpressionNode(MemberExpressionNode node, word data) virtual
    object visitCallExpressionNode(CallExpressionNode node, word data) virtual
    object visitElementExpressionNode(ElementExpressionNode node, word data) virtual

    object visitFullCommaExpressionNode(FullCommaExpressionNode node, word data) virtual
    object visitFullCommaExpressionElementNode(FullCommaExpressionElementNode node, word data) virtual

    object visitLiteralNode(LiteralNode node, word data) virtual
    object visitIdentifierNode(IdentifierNode node, word data) virtual

    string getText()


class DeclarationVisitor: BaseVisitor::
    currentScope: object, private
    currentType: object, private
    // TODO this must be passed as an extra "data" parameter

    int16 construct()

    object visit()
    object visitObjectDeclarationNode(ObjectDeclarationNode node, word data) virtual
    object visitSimpleTypeExpressionNode(SimpleTypeExpressionNode node, word data) virtual
    object visitInitializerTypeExpressionNode(InitializerTypeExpressionNode node, word data) virtual
    object visitObjectDeclarationNameNode(ObjectDeclarationNameNode node, word data) virtual

    // TODO separate different types of full comma expressions
    object visitFullCommaExpressionNode(FullCommaExpressionNode node, word data) virtual
    object visitFullCommaExpressionElementNode(FullCommaExpressionElementNode node, word data) virtual
