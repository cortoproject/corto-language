// tc_element03
// This program tests the element operator for various variables with basic collection-types.
// The test is equal to tc_element01 except it uses collections of references.
bool result : true
void fail(string msg):
    "tc_element03: FAIL: $msg"
    result = false

class Foo:: x: uint32
Foo a: 10
Foo b: 20
Foo c: 30

array FooArray : Foo,3
sequence FooSeq : Foo,3
list FooList : Foo
map FooMap : Foo,string

// Validation of results
FooArray Foo_aCheck : a,b,c
FooSeq Foo_sCheck : a,b,c
FooList Foo_lCheck : a,b,c
FooMap Foo_mCheck : "a"=a "b"=b "c"=c

void validate(FooArray c, string failMsg): if c.compare(Foo_aCheck): fail(failMsg)
void validate(FooSeq c, string failMsg):   if c.compare(Foo_sCheck): fail(failMsg)
void validate(FooList c, string failMsg):  if c.compare(Foo_lCheck): fail(failMsg)
void validate(FooMap c, string failMsg):   if c.compare(Foo_mCheck): fail(failMsg)

// Array object
FooArray Foo_a: null, null, null
Foo_a[0] = a
Foo_a[1] = b
Foo_a[2] = c
validate(Foo_a, "Array object with static index")

// Sequence object
FooSeq Foo_s: null, null, null
Foo_s[0] = a
Foo_s[1] = b
Foo_s[2] = c
validate(Foo_s, "Sequence object with static index")

// List object
FooList Foo_l: null, null, null
Foo_l[0] = a
Foo_l[1] = b
Foo_l[2] = c
validate(Foo_l, "List object with static index")

// Map object
FooMap Foo_m : "a"=null "b"=null "c"=null
Foo_m["a"] = a
Foo_m["b"] = b
Foo_m["c"] = c
// validate(Foo_m, "tc_element01 FAIL: Map object with static index") Maps equal function not yet implemented

// Array var
var FooArray Foo_la = {null,null,null}
Foo_la[0] = a
Foo_la[1] = b
Foo_la[2] = c
validate(Foo_la, "Array var with static index")

// Sequence var
var FooSeq Foo_ls = {null,null,null}
Foo_ls[0] = a
Foo_ls[1] = b
Foo_ls[2] = c
validate(Foo_ls, "Sequence var with static index")

// List var
// Map var
// need to come up with a way to automatically initialize list and map fields so that they
// contain either a valid corto_ll or corto_rb object. Especially the latter is difficult and
// cannot be automated because it requires a subtype.

uint32 i : 0

// Objects with variable indexes
// Array object with variable object index
FooArray Foo_avo: null, null, null
while i<3:
    Foo_avo[i] = Foo_aCheck[i]
    i++
validate(Foo_avo, "Array object with dynamic object index")
    
// Sequence object with variable object index
FooSeq Foo_svo: null, null, null
i=0
while i<3:
    Foo_svo[i] = Foo_aCheck[i]
    i++
validate(Foo_svo, "Sequence object with dynamic object index")

var uint32 j = 0

// Array object with variable var index
FooArray Foo_avl: null, null, null
while j<3:
    Foo_avl[j] = Foo_aCheck[j]
    j++
validate(Foo_avl, "Array object with dynamic var index")
    
// Sequence object with variable var index
FooSeq Foo_svl: null, null, null
j=0
while j<3:
    Foo_svl[j] = Foo_aCheck[j]
    j++
validate(Foo_svl, "Sequence object with dynamic var index")
    
// vars with variable indexes
// Array var with variable object index
var FooArray Foo_alvo = {null, null, null}
i=0
while i<3:
    Foo_alvo[i] = Foo_aCheck[i]
    i++
validate(Foo_alvo, "Array var with variable object index")

// Sequence var with variable object index
var FooSeq Foo_slvo = {null,null,null}
i=0
while i<3:
    Foo_slvo[i] = Foo_aCheck[i]
    i++
validate(Foo_slvo, "Sequence var with variable object index")

// Array var with variable var index
var FooArray Foo_alvl = {null,null,null}
j=0
while j<3:
    Foo_alvl[j] = Foo_aCheck[j]
    j++
validate(Foo_alvl, "Array var with variable var index")
    
// Sequence var with variable var index
var FooSeq Foo_slvl = {null,null,null}
j=0
while j<3:
    Foo_slvl[j] = Foo_aCheck[j]
    j++
validate(Foo_slvl, "Sequence var with variable var index")

if result: "tc_element03: OK"
