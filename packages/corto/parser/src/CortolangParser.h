/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : Cortolang.g
 *     -                            On : 2016-05-06 23:19:31
 *     -                for the parser : CortolangParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser 
CortolangParser

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pCortolangParser, which is returned from a call to CortolangParserNew().
 *
 * The methods in pCortolangParser are  as follows:
 *
 *  - 
 CortolangParser_program_return
      pCortolangParser->program(pCortolangParser)
 *  - 
 CortolangParser_statement_return
      pCortolangParser->statement(pCortolangParser)
 *  - 
 CortolangParser_declarativeStatement_return
      pCortolangParser->declarativeStatement(pCortolangParser)
 *  - 
 CortolangParser_simpleStatement_return
      pCortolangParser->simpleStatement(pCortolangParser)
 *  - 
 CortolangParser_declarationExt_return
      pCortolangParser->declarationExt(pCortolangParser)
 *  - 
 CortolangParser_declarationInitializer_return
      pCortolangParser->declarationInitializer(pCortolangParser)
 *  - 
 CortolangParser_validNameList_return
      pCortolangParser->validNameList(pCortolangParser)
 *  - 
 CortolangParser_scopeBlock_return
      pCortolangParser->scopeBlock(pCortolangParser)
 *  - 
 CortolangParser_scopeOp_return
      pCortolangParser->scopeOp(pCortolangParser)
 *  - 
 CortolangParser_initializer_return
      pCortolangParser->initializer(pCortolangParser)
 *  - 
 CortolangParser_initializerValue_return
      pCortolangParser->initializerValue(pCortolangParser)
 *  - 
 CortolangParser_initializerBraces_return
      pCortolangParser->initializerBraces(pCortolangParser)
 *  - 
 CortolangParser_initializerKeyValue_return
      pCortolangParser->initializerKeyValue(pCortolangParser)
 *  - 
 CortolangParser_initializerKey_return
      pCortolangParser->initializerKey(pCortolangParser)
 *  - 
 CortolangParser_functionDeclaration_return
      pCortolangParser->functionDeclaration(pCortolangParser)
 *  - 
 CortolangParser_functionArguments_return
      pCortolangParser->functionArguments(pCortolangParser)
 *  - 
 CortolangParser_functionArgument_return
      pCortolangParser->functionArgument(pCortolangParser)
 *  - 
 CortolangParser_expression_return
      pCortolangParser->expression(pCortolangParser)
 *  - 
 CortolangParser_waitExpression_return
      pCortolangParser->waitExpression(pCortolangParser)
 *  - 
 CortolangParser_assignmentExpression_return
      pCortolangParser->assignmentExpression(pCortolangParser)
 *  - 
 CortolangParser_commaExpression_return
      pCortolangParser->commaExpression(pCortolangParser)
 *  - 
 CortolangParser_conditionalExpression_return
      pCortolangParser->conditionalExpression(pCortolangParser)
 *  - 
 CortolangParser_logicOrExpression_return
      pCortolangParser->logicOrExpression(pCortolangParser)
 *  - 
 CortolangParser_logicAndExpression_return
      pCortolangParser->logicAndExpression(pCortolangParser)
 *  - 
 CortolangParser_equalityExpression_return
      pCortolangParser->equalityExpression(pCortolangParser)
 *  - 
 CortolangParser_comparisonExpression_return
      pCortolangParser->comparisonExpression(pCortolangParser)
 *  - 
 CortolangParser_bitOrExpression_return
      pCortolangParser->bitOrExpression(pCortolangParser)
 *  - 
 CortolangParser_bitXorExpression_return
      pCortolangParser->bitXorExpression(pCortolangParser)
 *  - 
 CortolangParser_bitAndExpression_return
      pCortolangParser->bitAndExpression(pCortolangParser)
 *  - 
 CortolangParser_shiftExpression_return
      pCortolangParser->shiftExpression(pCortolangParser)
 *  - 
 CortolangParser_addExpression_return
      pCortolangParser->addExpression(pCortolangParser)
 *  - 
 CortolangParser_multExpression_return
      pCortolangParser->multExpression(pCortolangParser)
 *  - 
 CortolangParser_unaryExpression_return
      pCortolangParser->unaryExpression(pCortolangParser)
 *  - 
 CortolangParser_postfixExpression_return
      pCortolangParser->postfixExpression(pCortolangParser)
 *  - 
 CortolangParser_atomExpression_return
      pCortolangParser->atomExpression(pCortolangParser)
 *  - 
 CortolangParser_assignmentOp_return
      pCortolangParser->assignmentOp(pCortolangParser)
 *  - 
 CortolangParser_eqOp_return
      pCortolangParser->eqOp(pCortolangParser)
 *  - 
 CortolangParser_comparisonOp_return
      pCortolangParser->comparisonOp(pCortolangParser)
 *  - 
 CortolangParser_shiftOp_return
      pCortolangParser->shiftOp(pCortolangParser)
 *  - 
 CortolangParser_addOp_return
      pCortolangParser->addOp(pCortolangParser)
 *  - 
 CortolangParser_multOp_return
      pCortolangParser->multOp(pCortolangParser)
 *  - 
 CortolangParser_unaryOp_return
      pCortolangParser->unaryOp(pCortolangParser)
 *  - 
 CortolangParser_postfixOperation_return
      pCortolangParser->postfixOperation(pCortolangParser)
 *  - 
 CortolangParser_memberAccess_return
      pCortolangParser->memberAccess(pCortolangParser)
 *  - 
 CortolangParser_methodCall_return
      pCortolangParser->methodCall(pCortolangParser)
 *  - 
 CortolangParser_constant_return
      pCortolangParser->constant(pCortolangParser)
 *  - 
 CortolangParser_identifier_return
      pCortolangParser->identifier(pCortolangParser)
 *  - 
 CortolangParser_typeLabel_return
      pCortolangParser->typeLabel(pCortolangParser)
 *  - 
 CortolangParser_anonymousTypeLabel_return
      pCortolangParser->anonymousTypeLabel(pCortolangParser)
 *  - 
 CortolangParser_literal_return
      pCortolangParser->literal(pCortolangParser)
 *  - 
 CortolangParser_anonymousObject_return
      pCortolangParser->anonymousObject(pCortolangParser)
 *  - 
 CortolangParser_postScopeOperator_return
      pCortolangParser->postScopeOperator(pCortolangParser)
 *  - 
 CortolangParser_preScopeOperator_return
      pCortolangParser->preScopeOperator(pCortolangParser)
 * 
 * 
 * 
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_CortolangParser_H
#define _CortolangParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#include "cortolangParserCustom.hpp"


#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct CortolangParser_Ctx_struct CortolangParser, * pCortolangParser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */

typedef struct CortolangParser_program_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_program_return;



typedef struct CortolangParser_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_statement_return;



typedef struct CortolangParser_declarativeStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_declarativeStatement_return;



typedef struct CortolangParser_simpleStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_simpleStatement_return;



typedef struct CortolangParser_declarationExt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_declarationExt_return;



typedef struct CortolangParser_declarationInitializer_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_declarationInitializer_return;



typedef struct CortolangParser_validNameList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_validNameList_return;



typedef struct CortolangParser_scopeBlock_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_scopeBlock_return;



typedef struct CortolangParser_scopeOp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_scopeOp_return;



typedef struct CortolangParser_initializer_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_initializer_return;



typedef struct CortolangParser_initializerValue_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_initializerValue_return;



typedef struct CortolangParser_initializerBraces_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_initializerBraces_return;



typedef struct CortolangParser_initializerKeyValue_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_initializerKeyValue_return;



typedef struct CortolangParser_initializerKey_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_initializerKey_return;



typedef struct CortolangParser_functionDeclaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_functionDeclaration_return;



typedef struct CortolangParser_functionArguments_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_functionArguments_return;



typedef struct CortolangParser_functionArgument_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_functionArgument_return;



typedef struct CortolangParser_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_expression_return;



typedef struct CortolangParser_waitExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_waitExpression_return;



typedef struct CortolangParser_assignmentExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_assignmentExpression_return;



typedef struct CortolangParser_commaExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_commaExpression_return;



typedef struct CortolangParser_conditionalExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_conditionalExpression_return;



typedef struct CortolangParser_logicOrExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_logicOrExpression_return;



typedef struct CortolangParser_logicAndExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_logicAndExpression_return;



typedef struct CortolangParser_equalityExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_equalityExpression_return;



typedef struct CortolangParser_comparisonExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_comparisonExpression_return;



typedef struct CortolangParser_bitOrExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_bitOrExpression_return;



typedef struct CortolangParser_bitXorExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_bitXorExpression_return;



typedef struct CortolangParser_bitAndExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_bitAndExpression_return;



typedef struct CortolangParser_shiftExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_shiftExpression_return;



typedef struct CortolangParser_addExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_addExpression_return;



typedef struct CortolangParser_multExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_multExpression_return;



typedef struct CortolangParser_unaryExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_unaryExpression_return;



typedef struct CortolangParser_postfixExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_postfixExpression_return;



typedef struct CortolangParser_atomExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_atomExpression_return;



typedef struct CortolangParser_assignmentOp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_assignmentOp_return;



typedef struct CortolangParser_eqOp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_eqOp_return;



typedef struct CortolangParser_comparisonOp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_comparisonOp_return;



typedef struct CortolangParser_shiftOp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_shiftOp_return;



typedef struct CortolangParser_addOp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_addOp_return;



typedef struct CortolangParser_multOp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_multOp_return;



typedef struct CortolangParser_unaryOp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_unaryOp_return;



typedef struct CortolangParser_postfixOperation_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_postfixOperation_return;



typedef struct CortolangParser_memberAccess_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_memberAccess_return;



typedef struct CortolangParser_methodCall_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_methodCall_return;



typedef struct CortolangParser_constant_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_constant_return;



typedef struct CortolangParser_identifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_identifier_return;



typedef struct CortolangParser_typeLabel_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_typeLabel_return;



typedef struct CortolangParser_anonymousTypeLabel_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_anonymousTypeLabel_return;



typedef struct CortolangParser_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_literal_return;



typedef struct CortolangParser_anonymousObject_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_anonymousObject_return;



typedef struct CortolangParser_postScopeOperator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_postScopeOperator_return;



typedef struct CortolangParser_preScopeOperator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    CortolangParser_preScopeOperator_return;




/** Context tracking structure for 
CortolangParser

 */
struct CortolangParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;

     CortolangParser_program_return
     (*program)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_statement_return
     (*statement)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_declarativeStatement_return
     (*declarativeStatement)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_simpleStatement_return
     (*simpleStatement)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_declarationExt_return
     (*declarationExt)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_declarationInitializer_return
     (*declarationInitializer)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_validNameList_return
     (*validNameList)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_scopeBlock_return
     (*scopeBlock)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_scopeOp_return
     (*scopeOp)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_initializer_return
     (*initializer)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_initializerValue_return
     (*initializerValue)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_initializerBraces_return
     (*initializerBraces)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_initializerKeyValue_return
     (*initializerKeyValue)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_initializerKey_return
     (*initializerKey)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_functionDeclaration_return
     (*functionDeclaration)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_functionArguments_return
     (*functionArguments)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_functionArgument_return
     (*functionArgument)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_expression_return
     (*expression)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_waitExpression_return
     (*waitExpression)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_assignmentExpression_return
     (*assignmentExpression)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_commaExpression_return
     (*commaExpression)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_conditionalExpression_return
     (*conditionalExpression)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_logicOrExpression_return
     (*logicOrExpression)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_logicAndExpression_return
     (*logicAndExpression)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_equalityExpression_return
     (*equalityExpression)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_comparisonExpression_return
     (*comparisonExpression)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_bitOrExpression_return
     (*bitOrExpression)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_bitXorExpression_return
     (*bitXorExpression)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_bitAndExpression_return
     (*bitAndExpression)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_shiftExpression_return
     (*shiftExpression)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_addExpression_return
     (*addExpression)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_multExpression_return
     (*multExpression)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_unaryExpression_return
     (*unaryExpression)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_postfixExpression_return
     (*postfixExpression)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_atomExpression_return
     (*atomExpression)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_assignmentOp_return
     (*assignmentOp)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_eqOp_return
     (*eqOp)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_comparisonOp_return
     (*comparisonOp)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_shiftOp_return
     (*shiftOp)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_addOp_return
     (*addOp)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_multOp_return
     (*multOp)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_unaryOp_return
     (*unaryOp)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_postfixOperation_return
     (*postfixOperation)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_memberAccess_return
     (*memberAccess)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_methodCall_return
     (*methodCall)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_constant_return
     (*constant)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_identifier_return
     (*identifier)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_typeLabel_return
     (*typeLabel)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_anonymousTypeLabel_return
     (*anonymousTypeLabel)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_literal_return
     (*literal)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_anonymousObject_return
     (*anonymousObject)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_postScopeOperator_return
     (*postScopeOperator)	(struct CortolangParser_Ctx_struct * ctx);

     CortolangParser_preScopeOperator_return
     (*preScopeOperator)	(struct CortolangParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred1_Cortolang)	(struct CortolangParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred2_Cortolang)	(struct CortolangParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred3_Cortolang)	(struct CortolangParser_Ctx_struct * ctx);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct CortolangParser_Ctx_struct * ctx);
    void	    (*free)   (struct CortolangParser_Ctx_struct * ctx);
/* @headerFile.members() */
pANTLR3_BASE_TREE_ADAPTOR	adaptor;
pANTLR3_VECTOR_FACTORY		vectors;
/* End @headerFile.members() */
    struct parser_data* parser_data;

};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pCortolangParser CortolangParserNew         (
pANTLR3_COMMON_TOKEN_STREAM
 instream);
ANTLR3_API pCortolangParser CortolangParserNewSSD      (
pANTLR3_COMMON_TOKEN_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
parser
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define AMPERSAND      4
#define ASTERISK      5
#define BOOLEAN      6
#define CHARACTER      7
#define CIRCUMFLEX      8
#define COLON      9
#define COMMA      10
#define DEDENT      11
#define DIGIT      12
#define DIV_EQUAL      13
#define DOUBLE_COLON      14
#define EQUAL      15
#define EQUALS      16
#define ESC      17
#define GID      18
#define GREATER_THAN      19
#define GREATER_THAN_EQUAL      20
#define INDENT      21
#define INTEGER      22
#define KW_FOR      23
#define KW_WAIT      24
#define LBRACE      25
#define LBRACK      26
#define LESS_THAN      27
#define LESS_THAN_EQUAL      28
#define LETTER_UNDERSCORE      29
#define LOGIC_AND      30
#define LOGIC_OR      31
#define LPAREN      32
#define LSHIFT      33
#define MINUS      34
#define MINUS_EQUAL      35
#define NEWLINE      36
#define NOT_EQUALS      37
#define PIPE      38
#define PLUS      39
#define PLUS_EQUAL      40
#define QMARK      41
#define RBRACE      42
#define RBRACK      43
#define RPAREN      44
#define RSHIFT      45
#define SLASH      46
#define STRING      47
#define TILDE      48
#define TIMES_EQUAL      49
#define TRIPLE_COLON      50
#define VALID_NAME      51
#define WHITESPACE      52
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for CortolangParser
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
