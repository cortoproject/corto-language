// Test various ways of initializing composite and collection values
bool result: true

string testname : "tc_initializers01"

struct Point::
    member x, y : uint32
    
struct Point3D : Point::
    member z : uint32
    
enum Color::
    constant Red,Yellow,Blue    
    
struct Line::
    member start,stop : Point3D
    member color : ::Color
    
void fail(string txt):
    "$testname: FAIL: $txt"
    result = false
    
void test(Point p, int32 x, int32 y, string msg):
    if p.x != x: fail("$msg.x (${p.x} vs. $x)")
    if p.y != y: fail("$msg.y (${p.y} vs. $y)")
        
void test(Point3D p, int32 x, int32 y, int32 z, string msg):
    test(p, x, y, msg)
    if p.z != z: fail("$msg.z (${p.z} vs $z)")
        
void test(Line l, int32 x1, int32 y1, int32 z1, int32 x2, int32 y2, int32 z2, Color color, string msg):
    test(l.start, x1, y1, z1, "$msg.start")
    test(l.stop, x2, y2, z2, "$msg.stop")
    if l.color != color: fail("$msg.color")
    
Color c1 : Red
    
Point3D p1 : 10,20,30
Point3D p2 : x=40 y=50 z=60
Point3D p3 : x=70 y=80 z=90
var Point3D p4 = {10,20,30}
var Point3D& p5 = Point3D{20,30,40}
var Point3D& p6 = &p5

Line l1 : {10, 20, 30}, {40, 50, 60}, Red
Line l2 : start = {10, 20, 30} stop = {40, 50, 60} color = Yellow
Line l3 : start = {x=10 y=20 z=30} stop = {x=40 y=50 z=60} color = Blue

array PointArray : Point3D, 3
sequence PointSeq : Point3D
list PointList : Point3D
map PointMap : Point3D, string

PointArray pa1 : {10,20,30}, {40,50,60}, {70,80,90}
PointArray pa2 : p1, p2, p3
PointArray pa3 : Point3D{10,20,30}, Point3D{40,50,60}, Point3D{70,80,90}

PointSeq ps1 : {10,20,30}, {40,50,60}, {70,80,90}
PointSeq ps2 : p1, p2, p3
PointSeq ps3 : Point3D{10,20,30}, Point3D{40,50,60}, Point3D{70,80,90}
 
PointList pl1 : {10,20,30}, {40,50,60}, {70,80,90}
PointList pl2 : p1, p2, p3
PointList pl3 : Point3D{10,20,30}, Point3D{40,50,60}, Point3D{70,80,90}

PointMap pm1 : "point1"={10,20,30} "point2"={40,50,60} "point3"={70,80,90}
PointMap pm2 : "point1"=p1 "point2"=p2 "point3"=p3
PointMap pm3 : "point1"=Point3D{10,20,30} "point2"=Point3D{40,50,60} "point3"=Point3D{70,80,90}

// Test points
test(p1, 10, 20, 30, "p1")
test(p2, 40, 50, 60, "p2")
test(p3, 70, 80, 90, "p3")
test(p4, 10, 20, 30, "p4")
test(p5, 20, 30, 40, "p5")
test(p6, 20, 30, 40, "p6")

// Reassign variables with initializer
p4 = {30,40,50}
p5 = {40,50,60}
test(p4, 30, 40, 50, "p4 (2)")
test(p5, 40, 50, 60, "p5 (2)")
test(p6, 40, 50, 60, "p6 (2)")

// Test lines
test(l1, 10, 20, 30, 40, 50, 60, Color::Red, "l1")
test(l2, 10, 20, 30, 40, 50, 60, Color::Yellow, "l2")
test(l3, 10, 20, 30, 40, 50, 60, Color::Blue, "l3")

// Test pa1
test(pa1[0], 10, 20, 30, "pa1[0]")
test(pa1[1], 40, 50, 60, "pa1[1]")
test(pa1[2], 70, 80, 90, "pa1[2]")

// Test pa2
test(pa2[0], 10, 20, 30, "pa2[0]")
test(pa2[1], 40, 50, 60, "pa2[1]")
test(pa2[2], 70, 80, 90, "pa2[2]")

// Test pa3
test(pa3[0], 10, 20, 30, "pa3[0]")
test(pa3[1], 40, 50, 60, "pa3[1]")
test(pa3[2], 70, 80, 90, "pa3[2]")

// Test ps1
test(ps1[0], 10, 20, 30, "ps1[0]")
test(ps1[1], 40, 50, 60, "ps1[1]")
test(ps1[2], 70, 80, 90, "ps1[2]")
if ps1.size() != 3: fail("ps1.size() != 3 (${ps1.size()})")

// Test ps2
test(ps2[0], 10, 20, 30, "ps2[0]")
test(ps2[1], 40, 50, 60, "ps2[1]")
test(ps2[2], 70, 80, 90, "ps2[2]")
if ps2.size() != 3: fail("ps2.size() != 3 (${ps2.size()})")

// Test ps3
test(ps3[0], 10, 20, 30, "ps3[0]")
test(ps3[1], 40, 50, 60, "ps3[1]")
test(ps3[2], 70, 80, 90, "ps3[2]")
if ps3.size() != 3: fail("ps3.size() != 3 (${ps3.size()})")

// Test pl1
test(pl1[0], 10, 20, 30, "pl1[0]")
test(pl1[1], 40, 50, 60, "pl1[1]")
test(pl1[2], 70, 80, 90, "pl1[2]")
if pl1.size() != 3: fail("pl1.size() != 3 (${pl1.size()})")

// Test pl2
test(pl2[0], 10, 20, 30, "pl2[0]")
test(pl2[1], 40, 50, 60, "pl2[1]")
test(pl2[2], 70, 80, 90, "pl2[2]")
if pl2.size() != 3: fail("pl2.size() != 3 (${pl2.size()})")

// Test pl3
test(pl3[0], 10, 20, 30, "pl3[0]")
test(pl3[1], 40, 50, 60, "pl3[1]")
test(pl3[2], 70, 80, 90, "pl3[2]")
if pl3.size() != 3: fail("pl3.size() != 3 (${pl3.size()})")

// Test pm1
test(pm1["point1"], 10, 20, 30, "pm1[\"point1\"]")
test(pm1["point2"], 40, 50, 60, "pm1[\"point2\"]")
test(pm1["point3"], 70, 80, 90, "pm1[\"point3\"]")

// Test pm2
test(pm2["point1"], 10, 20, 30, "pm2[\"point1\"]")
test(pm2["point2"], 40, 50, 60, "pm2[\"point2\"]")
test(pm2["point3"], 70, 80, 90, "pm2[\"point3\"]")

// Test pm3
test(pm3["point1"], 10, 20, 30, "pm3[\"point1\"]")
test(pm3["point2"], 40, 50, 60, "pm3[\"point2\"]")
test(pm3["point3"], 70, 80, 90, "pm3[\"point3\"]")

if result: "$testname: OK"
