// tc_element01
// This program tests the element operator for various variables with basic collection-types.
bool result : true
void fail(string msg):
    "tc_element01: FAIL: $msg"
    result = false

array IntsArray : uint32,3
sequence IntsSeq : uint32,3
list IntsList : uint32
map IntsMap : uint32,string

// Validation of results
IntsArray ints_aCheck : 10,20,30
IntsSeq ints_sCheck : 10,20,30
IntsList ints_lCheck : 10,20,30
IntsMap ints_mCheck : "a"=10 "b"=20 "c"=30

void validate(IntsArray c, string failMsg): if c.compare(ints_aCheck): fail(failMsg)
void validate(IntsSeq c, string failMsg):   if c.compare(ints_sCheck): fail(failMsg)
void validate(IntsList c, string failMsg):  if c.compare(ints_lCheck): fail(failMsg)
void validate(IntsMap c, string failMsg):   if c.compare(ints_mCheck): fail(failMsg)

// Array object
IntsArray ints_a : 1,2,3
ints_a[0] = 10
ints_a[1] *= 10
ints_a[2] += 27
validate(ints_a, "Array object with static index")

// Sequence object
IntsSeq ints_s : 1,2,3
ints_s[0] = 10
ints_s[1] *= 10
ints_s[2] += 27
validate(ints_s, "Sequence object with static index")

// List object
IntsList ints_l : 1,2,3
ints_l[0] = 10
ints_l[1] *= 10
ints_l[2] += 27
validate(ints_l, "List object with static index")

// Map object
IntsMap ints_m : "a"=1 "b"=2 "c"=3
ints_m["a"] = 10
ints_m["b"] *= 10
ints_m["c"] += 27
// validate(ints_m, "tc_element01 FAIL: Map object with static index") Maps equal function not yet implemented

// Array var
var IntsArray ints_la = {1,2,3}
ints_la[0] = 10
ints_la[1] *= 10
ints_la[2] += 27
validate(ints_la, "Array var with static index")

// Sequence var
var IntsSeq ints_ls = {1,2,3}
ints_ls[0] = 10
ints_ls[1] *= 10
ints_ls[2] += 27
validate(ints_ls, "Sequence var with static index")

// List var
// Map var
// need to come up with a way to automatically initialize list and map fields so that they
// contain either a valid corto_ll or corto_rb object. Especially the latter is difficult and
// cannot be automated because it requires a subtype.

uint32 i : 0

// Objects with variable indexes
// Array object with variable object index
IntsArray ints_avo : 1,2,3
while i<3:
    ints_avo[i] *= 10
    i++
validate(ints_avo, "Array object with dynamic object index")
    
// Sequence object with variable object index
IntsSeq ints_svo : 1,2,3
i=0
while i<3:
    ints_svo[i] *= 10
    i++
validate(ints_svo, "Sequence object with dynamic object index")

var uint32 j = 0

// Array object with variable var index
IntsArray ints_avl : 1,2,3
while j<3:
    ints_avl[j] *= 10
    j++
validate(ints_avl, "Array object with dynamic var index")
    
// Sequence object with variable var index
IntsSeq ints_svl : 1,2,3
j=0
while j<3:
    ints_svl[j] *= 10
    j++
validate(ints_svl, "Sequence object with dynamic var index")
    
// vars with variable indexes
// Array var with variable object index
var IntsArray ints_alvo = {1,2,3}
i=0
while i<3:
    ints_alvo[i] *= 10
    i++
validate(ints_alvo, "Array var with variable object index")
    
// Sequence var with variable object index
var IntsSeq ints_slvo = {1,2,3}
i=0
while i<3:
    ints_slvo[i] *= 10
    i++
validate(ints_slvo, "Sequence var with variable object index")

// Array var with variable var index
var IntsArray ints_alvl = {1,2,3}
j=0
while j<3:
    ints_alvl[j] *= 10
    j++
validate(ints_alvl, "Array var with variable var index")
    
// Sequence var with variable var index
var IntsSeq ints_slvl = {1,2,3}
j=0
while j<3:
    ints_slvl[j] *= 10
    j++
validate(ints_slvl, "Sequence var with variable var index")

if result: "tc_element01: OK"
