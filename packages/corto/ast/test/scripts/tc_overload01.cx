// Test overloading with primitive types
bool result : true
void fail(string msg):
    "tc_overload01: FAIL: $msg"
    result = false

// Overloading with single argument
uint32 Foo(uint32 a) = a    
float32 Foo(float32 b) = b
string Foo(string c) = c
    
// Overloading with two arguments
uint32 Foo(uint32 a, uint32 b) = a * b
uint32 Foo(float32 a, uint32 b) = a * b
float32 Foo(float32 a, float32 b) = a * b
string Foo(string a, string b) = a + b

// Test passing objects
string Foo(object a) = a.nameof()

if 10 != Foo(10):       fail("Foo(uint32) returned incorrect result (${Foo(10)})")
if 10.5 != Foo(10.5):   fail("Foo(float32) returned incorrect result (${Foo(10.5)})")
if "Foo" != Foo("Foo"): fail("Foo(string) returned incorrect result (\"${Foo(\"Foo\")}\")")
if 30 != Foo(3, 10):    fail("Foo(uint32,uint32) returned incorrect result (${Foo(3,10)})")
if 35 != Foo(3.5, 10):  fail("Foo(float32,uint32) returned incorrect result (${Foo(3.5,10)})")
if 5.0 != Foo(0.5, 10.0): fail("Foo(float32,float32) returned incorrect result (${Foo(0.5,10.0)})")
if "AB" != Foo("A", "B"): fail("Foo(string,string) returned incorrect result (\"${Foo(\"A\",\"B\")}\")")
if Foo(&result) != "result":      fail("failed to pass non-reference object as object")
if Foo(uint32(result)) != 1:      fail("failed to pass boolean as integer")
if Foo(string(result)) != "true": fail("failed to pass boolean as string")

if result: "tc_overload01: OK"
