/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : Cortolang.g
 *     -                            On : 2016-05-06 11:15:10
 *     -                 for the lexer : CortolangLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer 
CortolangLexer

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pCortolangLexer, which is returned from a call to CortolangLexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 *
 * The methods in pCortolangLexer are  as follows:
 *
 *  - 
 void
      pCortolangLexer->WHITESPACE(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->INDENT(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->DEDENT(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->BOOLEAN(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->KW_WAIT(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->KW_FOR(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->LOGIC_AND(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->LOGIC_OR(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->LPAREN(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->RPAREN(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->LBRACK(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->RBRACK(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->LBRACE(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->RBRACE(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->EQUALS(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->NOT_EQUALS(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->RSHIFT(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->LSHIFT(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->GT(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->LT(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->GEQ(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->LEQ(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->QMARK(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->COLON(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->COMMA(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->TILDE(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->MINUS(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->PLUS(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->ASTERISK(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->SLASH(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->EQUAL(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->AMPERSAND(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->INTEGER(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->CHARACTER(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->STRING(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->NEWLINE(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->DOUBLE_COLON(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->TRIPLE_COLON(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->ESC(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->VALID_NAME(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->GID(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->LETTER_UNDERSCORE(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->DIGIT(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->Tokens(pCortolangLexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_CortolangLexer_H
#define _CortolangLexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct CortolangLexer_Ctx_struct CortolangLexer, * pCortolangLexer;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for 
CortolangLexer

 */
struct CortolangLexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;

     void
     (*mWHITESPACE)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mINDENT)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mDEDENT)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mBOOLEAN)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mKW_WAIT)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mKW_FOR)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mLOGIC_AND)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mLOGIC_OR)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mLPAREN)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mRPAREN)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mLBRACK)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mRBRACK)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mLBRACE)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mRBRACE)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mEQUALS)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mNOT_EQUALS)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mRSHIFT)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mLSHIFT)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mGT)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mLT)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mGEQ)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mLEQ)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mQMARK)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mCOLON)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mCOMMA)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mTILDE)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mMINUS)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mPLUS)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mASTERISK)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mSLASH)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mEQUAL)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mAMPERSAND)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mINTEGER)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mCHARACTER)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mSTRING)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mNEWLINE)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mDOUBLE_COLON)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mTRIPLE_COLON)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mESC)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mVALID_NAME)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mGID)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mLETTER_UNDERSCORE)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mDIGIT)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mTokens)	(struct CortolangLexer_Ctx_struct * ctx);
    const char * (*getGrammarFileName)();
    void            (*reset)  (struct CortolangLexer_Ctx_struct * ctx);
    void	    (*free)   (struct CortolangLexer_Ctx_struct * ctx);
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pCortolangLexer CortolangLexerNew         (
pANTLR3_INPUT_STREAM
 instream);
ANTLR3_API pCortolangLexer CortolangLexerNewSSD      (
pANTLR3_INPUT_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
lexer
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define AMPERSAND      4
#define ASTERISK      5
#define BOOLEAN      6
#define CHARACTER      7
#define COLON      8
#define COMMA      9
#define DEDENT      10
#define DIGIT      11
#define DOUBLE_COLON      12
#define EQUAL      13
#define EQUALS      14
#define ESC      15
#define GEQ      16
#define GID      17
#define GT      18
#define INDENT      19
#define INTEGER      20
#define KW_FOR      21
#define KW_WAIT      22
#define LBRACE      23
#define LBRACK      24
#define LEQ      25
#define LETTER_UNDERSCORE      26
#define LOGIC_AND      27
#define LOGIC_OR      28
#define LPAREN      29
#define LSHIFT      30
#define LT      31
#define MINUS      32
#define NEWLINE      33
#define NOT_EQUALS      34
#define PLUS      35
#define QMARK      36
#define RBRACE      37
#define RBRACK      38
#define RPAREN      39
#define RSHIFT      40
#define SLASH      41
#define STRING      42
#define TILDE      43
#define TRIPLE_COLON      44
#define VALID_NAME      45
#define WHITESPACE      46
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for CortolangLexer
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
