#package /corto/parser

// ============
// Forward Declarations
// ============

class ProgramNode
class StatementNode
class ExpressionNode
class FullCommaExpressionNode
class FullCommaExpressionElementNode
class BaseTypeExpressionNode

list StatementList: StatementNode
list ExpressionList: ExpressionNode
list FullCommaExpressionElementList: FullCommaExpressionElementNode


// ============
// Parser
// ============

class BaseParser::

    success: bool, readonly
    programReturn: ProgramNode, readonly

    int16 parse(string text)
    int16 parseFile(string filename)
    void displayRecognitionError(word recognizer, word tokenNames) virtual


class SimpleParser: BaseParser::
    errors: list{string}, hidden

    void displayRecognitionError(word recognizer, word tokenNames)


// ============
// Node
// ============

enum valueKind::
    Bool
    Char
    Int
    SignedInt
    Float
    Text
    Enum
    Ref
    Nothing

class Node::
    line: uint32
    column: uint32


class ProgramNode: Node::
    statements: StatementList


class StatementNode: Node


class ExpressionStatementNode: StatementNode::
    expression: ExpressionNode


class BlockNode: StatementNode::
    statements: StatementList


class ScopeNode: Node::
    statements: StatementList
    isPostScope: bool


// Declarations

class FunctionParameterNode: Node::
    typeLabel: BaseTypeExpressionNode
    name: string


list FunctionParameterList: FunctionParameterNode


class FunctionDeclarationNode: StatementNode::
    typeLabel: BaseTypeExpressionNode
    name: string
    parameters: FunctionParameterList
    block: BlockNode


// Expressions


class ExpressionNode: Node::
    type_: /corto/lang/type, readonly
    isReference: bool, readonly


class BinaryExpressionNode: ExpressionNode::
    left: ExpressionNode
    operator: operatorKind
    right: ExpressionNode


class CommaExpressionNode: ExpressionNode::
    expressions: ExpressionList


class ConditionalExpressionNode: ExpressionNode::
    condition: ExpressionNode
    trueValue: ExpressionNode
    falseValue: ExpressionNode


class UnaryExpressionNode: ExpressionNode::
    operator: operatorKind
    expression: ExpressionNode


class PostfixExpressionNode: ExpressionNode


class MemberExpressionNode: ExpressionNode::
    owner: ExpressionNode
    member: string


class CallExpressionNode: ExpressionNode::
    caller: ExpressionNode
    arguments: FullCommaExpressionNode // TODO put a FullCommaExpression


class ElementExpressionNode: ExpressionNode::
    owner: ExpressionNode
    elements: Node


class LiteralNode: ExpressionNode::
    word getValue() virtual

class BooleanLiteralNode: LiteralNode::
    value: bool
    word getValue()

class IntegerLiteralNode: LiteralNode::
    value: uint64
    word getValue()


class IdentifierNode: ExpressionNode::
    name: string


class FullCommaExpressionElementNode: Node::
    key: ExpressionNode
    value: ExpressionNode


class FullCommaExpressionNode: Node::
    elements: FullCommaExpressionElementList


// E.g. MyType; MyType{a}, MyType{a}{b}
class BaseTypeExpressionNode: Node::
    type_: corto/lang/type, readonly


class SimpleTypeExpressionNode: BaseTypeExpressionNode::
    name: string


class InitializerTypeExpressionNode: BaseTypeExpressionNode::
    type: BaseTypeExpressionNode
    arguments: FullCommaExpressionNode


class ObjectDeclarationNameNode: Node::
    name: string
    arguments: FullCommaExpressionNode


list ObjectDeclarationNameList: ObjectDeclarationNameNode


class ObjectDeclarationNode: StatementNode::
    typeLabel: BaseTypeExpressionNode
    declarations: ObjectDeclarationNameList
    initializer: FullCommaExpressionNode
    scope_: ScopeNode



// ============
// Visitor
// ============

class BaseVisitor::
    parser: baseParser

    int16 construct()
    void destruct()

    object visit() virtual

    object visitProgramNode(ProgramNode node) virtual

    object visitStatementNode(StatementNode node) virtual
    object visitExpressionStatementNode(ExpressionStatementNode node) virtual
    object visitFunctionDeclarationNode(FunctionDeclarationNode node) virtual
    object visitBlockNode(BlockNode node) virtual
    object visitObjectDeclarationNode(ObjectDeclarationNode node) virtual
    object visitObjectDeclarationNameNode(ObjectDeclarationNameNode node) virtual
    object visitBaseTypeExpressionNode(BaseTypeExpressionNode node) virtual
    object visitSimpleTypeExpressionNode(SimpleTypeExpressionNode node) virtual
    object visitInitializerTypeExpressionNode(InitializerTypeExpressionNode node) virtual
    object visitFunctionParameterNode(FunctionParameterNode node) virtual

    object visitScopeNode(ScopeNode node) virtual

    object visitExpressionNode(ExpressionNode node) virtual
    object visitBinaryExpressionNode(BinaryExpressionNode node) virtual
    object visitCommaExpressionNode(CommaExpressionNode node) virtual
    object visitConditionalExpressionNode(ConditionalExpressionNode node) virtual
    object visitUnaryExpressionNode(UnaryExpressionNode node) virtual
    object visitMemberExpressionNode(MemberExpressionNode node) virtual
    object visitCallExpressionNode(CallExpressionNode node) virtual
    object visitElementExpressionNode(ElementExpressionNode node) virtual

    object visitFullCommaExpressionNode(FullCommaExpressionNode node) virtual
    object visitFullCommaExpressionElementNode(FullCommaExpressionElementNode node) virtual

    object visitLiteralNode(LiteralNode node) virtual
    object visitIdentifierNode(IdentifierNode node) virtual


class PrintVisitor: BaseVisitor::
    buffer: word, private
    level: uint32, private

    int16 construct()
    void destruct()

    object visitProgramNode(ProgramNode node) virtual

    object visitStatementNode(StatementNode node) virtual
    object visitFunctionDeclarationNode(FunctionDeclarationNode node) virtual
    object visitBlockNode(BlockNode node) virtual
    object visitObjectDeclarationNode(ObjectDeclarationNode node) virtual
    object visitObjectDeclarationNameNode(ObjectDeclarationNameNode node) virtual
    object visitSimpleTypeExpressionNode(SimpleTypeExpressionNode node) virtual
    object visitInitializerTypeExpressionNode(InitializerTypeExpressionNode node) virtual
    object visitFunctionParameterNode(FunctionParameterNode node) virtual
    object visitScopeNode(ScopeNode node) virtual

    object visitExpressionNode(ExpressionNode node) virtual
    object visitBinaryExpressionNode(BinaryExpressionNode node) virtual
    object visitCommaExpressionNode(CommaExpressionNode node) virtual
    object visitConditionalExpressionNode(ConditionalExpressionNode node) virtual
    object visitUnaryExpressionNode(UnaryExpressionNode node) virtual
    object visitMemberExpressionNode(MemberExpressionNode node) virtual
    object visitCallExpressionNode(CallExpressionNode node) virtual
    object visitElementExpressionNode(ElementExpressionNode node) virtual

    object visitFullCommaExpressionNode(FullCommaExpressionNode node) virtual
    object visitFullCommaExpressionElementNode(FullCommaExpressionElementNode node) virtual

    object visitLiteralNode(LiteralNode node) virtual
    object visitIdentifierNode(IdentifierNode node) virtual

    string getText()


class DeclarationVisitor: BaseVisitor::
    currentScope: object, private
    currentType: object, private
    // TODO this must be passed as an extra "data" parameter

    int16 construct()

    object visit()
    object visitObjectDeclarationNode(ObjectDeclarationNode node) virtual
    object visitSimpleTypeExpressionNode(SimpleTypeExpressionNode node) virtual
    object visitObjectDeclarationNameNode(ObjectDeclarationNameNode node) virtual
