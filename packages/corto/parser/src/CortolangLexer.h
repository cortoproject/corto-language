/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : Cortolang.g
 *     -                            On : 2016-05-18 21:15:51
 *     -                 for the lexer : CortolangLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer 
CortolangLexer

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pCortolangLexer, which is returned from a call to CortolangLexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 *
 * The methods in pCortolangLexer are  as follows:
 *
 *  - 
 void
      pCortolangLexer->IMPLICIT_LINE_WHITESPACE(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->LEADING_WHITESPACE(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->WHITESPACE(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->KW_TRUE(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->KW_FALSE(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->KW_WAIT(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->KW_FOR(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->KW_IF(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->KW_ELSE(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->KW_WHILE(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->KW_BREAK(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->KW_CONTINUE(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->KW_AND(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->KW_OR(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->KW_DECLARE(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->KW_DEFINE(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->KW_UPDATE(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->KW_DESTRUCT(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->KW_SELF(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->KW_SCOPE(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->KW_TREE(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->KW_SYNCHRONIZED(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->KW_ON(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->EQUALS(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->NOT_EQUALS(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->RSHIFT(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->LSHIFT(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->GREATER_THAN_EQUAL(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->LESS_THAN_EQUAL(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->PLUS_EQUAL(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->MINUS_EQUAL(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->TIMES_EQUAL(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->DIV_EQUAL(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->LSHIFT_EQUALS(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->RSHIFT_EQUALS(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->BITAND_EQUALS(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->BITXOR_EQUALS(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->BITOR_EQUALS(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->DOUBLE_COLON(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->TRIPLE_COLON(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->VALID_NAME(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->GID(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->INTEGER(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->CHARACTER(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->STRING(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->ESC(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->LETTER_UNDERSCORE(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->DIGIT(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->LPAREN(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->RPAREN(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->LBRACK(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->RBRACK(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->LBRACE(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->RBRACE(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->QMARK(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->COLON(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->COMMA(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->GREATER_THAN(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->LESS_THAN(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->TILDE(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->PLUS(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->MINUS(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->ASTERISK(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->SLASH(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->EQUAL(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->AMPERSAND(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->PIPE(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->CIRCUMFLEX(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->DOT(pCortolangLexer)
 *  - 
 void
      pCortolangLexer->Tokens(pCortolangLexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_CortolangLexer_H
#define _CortolangLexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#include "CustomLexer.h"


#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct CortolangLexer_Ctx_struct CortolangLexer, * pCortolangLexer;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for 
CortolangLexer

 */
struct CortolangLexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;

     void
     (*mIMPLICIT_LINE_WHITESPACE)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mLEADING_WHITESPACE)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mWHITESPACE)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mKW_TRUE)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mKW_FALSE)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mKW_WAIT)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mKW_FOR)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mKW_IF)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mKW_ELSE)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mKW_WHILE)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mKW_BREAK)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mKW_CONTINUE)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mKW_AND)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mKW_OR)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mKW_DECLARE)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mKW_DEFINE)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mKW_UPDATE)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mKW_DESTRUCT)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mKW_SELF)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mKW_SCOPE)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mKW_TREE)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mKW_SYNCHRONIZED)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mKW_ON)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mEQUALS)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mNOT_EQUALS)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mRSHIFT)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mLSHIFT)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mGREATER_THAN_EQUAL)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mLESS_THAN_EQUAL)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mPLUS_EQUAL)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mMINUS_EQUAL)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mTIMES_EQUAL)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mDIV_EQUAL)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mLSHIFT_EQUALS)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mRSHIFT_EQUALS)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mBITAND_EQUALS)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mBITXOR_EQUALS)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mBITOR_EQUALS)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mDOUBLE_COLON)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mTRIPLE_COLON)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mVALID_NAME)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mGID)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mINTEGER)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mCHARACTER)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mSTRING)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mESC)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mLETTER_UNDERSCORE)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mDIGIT)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mLPAREN)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mRPAREN)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mLBRACK)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mRBRACK)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mLBRACE)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mRBRACE)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mQMARK)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mCOLON)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mCOMMA)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mGREATER_THAN)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mLESS_THAN)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mTILDE)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mPLUS)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mMINUS)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mASTERISK)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mSLASH)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mEQUAL)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mAMPERSAND)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mPIPE)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mCIRCUMFLEX)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mDOT)	(struct CortolangLexer_Ctx_struct * ctx);

     void
     (*mTokens)	(struct CortolangLexer_Ctx_struct * ctx);
    const char * (*getGrammarFileName)();
    void            (*reset)  (struct CortolangLexer_Ctx_struct * ctx);
    void	    (*free)   (struct CortolangLexer_Ctx_struct * ctx);

    struct CustomLexer_Data data;

};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pCortolangLexer CortolangLexerNew         (
pANTLR3_INPUT_STREAM
 instream);
ANTLR3_API pCortolangLexer CortolangLexerNewSSD      (
pANTLR3_INPUT_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
lexer
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define AMPERSAND      4
#define ASTERISK      5
#define BITAND_EQUALS      6
#define BITOR_EQUALS      7
#define BITXOR_EQUALS      8
#define CHARACTER      9
#define CIRCUMFLEX      10
#define COLON      11
#define COMMA      12
#define DEDENT      13
#define DIGIT      14
#define DIV_EQUAL      15
#define DOT      16
#define DOUBLE_COLON      17
#define EQUAL      18
#define EQUALS      19
#define ESC      20
#define GID      21
#define GREATER_THAN      22
#define GREATER_THAN_EQUAL      23
#define IMPLICIT_LINE_WHITESPACE      24
#define INDENT      25
#define INTEGER      26
#define KW_AND      27
#define KW_BREAK      28
#define KW_CONTINUE      29
#define KW_DECLARE      30
#define KW_DEFINE      31
#define KW_DESTRUCT      32
#define KW_ELSE      33
#define KW_FALSE      34
#define KW_FOR      35
#define KW_IF      36
#define KW_ON      37
#define KW_OR      38
#define KW_SCOPE      39
#define KW_SELF      40
#define KW_SYNCHRONIZED      41
#define KW_TREE      42
#define KW_TRUE      43
#define KW_UPDATE      44
#define KW_WAIT      45
#define KW_WHILE      46
#define LBRACE      47
#define LBRACK      48
#define LEADING_WHITESPACE      49
#define LESS_THAN      50
#define LESS_THAN_EQUAL      51
#define LETTER_UNDERSCORE      52
#define LPAREN      53
#define LSHIFT      54
#define LSHIFT_EQUALS      55
#define MINUS      56
#define MINUS_EQUAL      57
#define NEWLINE      58
#define NOT_EQUALS      59
#define PIPE      60
#define PLUS      61
#define PLUS_EQUAL      62
#define QMARK      63
#define RBRACE      64
#define RBRACK      65
#define RPAREN      66
#define RSHIFT      67
#define RSHIFT_EQUALS      68
#define SLASH      69
#define STRING      70
#define TILDE      71
#define TIMES_EQUAL      72
#define TRIPLE_COLON      73
#define VALID_NAME      74
#define WHITESPACE      75
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for CortolangLexer
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
