// Comparisons of primitive types

bool result : true
void fail(string msg):
    "tc_compare01: FAIL: $msg"
    result = false
    
// Literal comparisons
// Booleans
if false.compare(true) != LT: fail("false.compare(true) (${false.compare(true)} != LT)")
if true.compare(false) != GT: fail("true.compare(false) (${true.compare(false)} != GT)")
if false.compare(false) != EQ: fail("false.compare(false) (${false.compare(false)} != EQ)")

// Characters
if 'a'.compare('b') != LT: fail("'a'.compare('b') (${'a'.compare('b')} != LT)")
if 'b'.compare('a') != GT: fail("'b'.compare('a') (${'b'.compare('a')} != GT)")
if 'a'.compare('a') != EQ: fail("'a'.compare('a') (${'a'.compare('a')} != EQ)")

// Integers
if 1.compare(2) != LT: fail("1.compare(2) (${1.compare(2)} != LT)")
if 2.compare(1) != GT: fail("2.compare(1) (${2.compare(1)} != GT)")
if 1.compare(1) != EQ: fail("1.compare(1) (${1.compare(1)} != EQ)")

// Floating point
if 1.0.compare(1.1) != LT: fail("1.0.compare(1.1) (${1.0.compare(1.1)} != LT)")
if 1.1.compare(1.0) != GT: fail("1.1.compare(1.0) (${1.1.compare(1.0)} != GT)")
if 1.1.compare(1.1) != EQ: fail("1.1.compare(1.1) (${1.1.compare(1.1)} != EQ)")

// Strings
if "aa".compare("ab") != LT: fail("\"aa\".compare(\"ab\") (${\"aa\".compare(\"ab\")} != LT)")
if "ab".compare("aa") != GT: fail("\"ab\".compare(\"aa\") (${\"ab\".compare(\"aa\")} != GT)")
if "aa".compare("aa") != EQ: fail("\"aa\".compare(\"ab\") (${\"aa\".compare(\"ab\")} != EQ)")

// Enumerations
enum Color:: Red, Blue
if Color::Red.compare(Color::Blue) != LT: fail("Color::Red.compare(Color::Blue) ${Color::Red.compare(Color::Blue)} != LT)")
if Color::Blue.compare(Color::Red) != GT: fail("Color::Blue.compare(Color::Red) ${Color::Blue.compare(Color::Red)} != GT)")
if Color::Red.compare(Color::Red) != EQ: fail("Color::Red.compare(Color::Red) ${Color::Red.compare(Color::Red)} != EQ)")

// Mixed types
if 1.compare(true) != NEQ: fail("1.compare(true) (${1.compare(true)} != NEQ)")
if 1.compare(1.1) != NEQ: fail("1.compare(1.1) (${1.compare(1.1)} != NEQ)")
if 1.compare('a') != NEQ: fail("1.compare('a') (${1.compare('a')} != NEQ)")
if 1.compare("aa") != NEQ: fail("1.compare(\"aa\") (${1.compare(\"aa\")} != NEQ)")
if 1.compare(Color::Blue) != NEQ: fail("1.compare(Color::Blue) (${1.compare(Color::Blue)} != NEQ)")

if result: "tc_compare01: OK"
