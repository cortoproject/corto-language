// Setting, getting and comparing primitive list locals
bool result: true

void fail(string msg):
    "tc_list02: FAIL: $msg"
    result = false

var list{uint32} a = {1, 2, 3}
var list{uint64} b = {1, 2, 3}
var list{type} c = {interface, struct, class}

// uint32
if a[0] != 1: fail("a[0] != 1 (${a[0]})")
if a[1] != 2: fail("a[1] != 2 (${a[1]})")
if a[2] != 3: fail("a[2] != 3 (${a[2]})")

a[0]++
a[1]+=3
a[2]=a[2]+4

if a[0] != 2: fail("a[0] != 2 (${a[0]})")
if a[1] != 5: fail("a[1] != 5 (${a[1]})")
if a[2] != 7: fail("a[2] != 7 (${a[2]})")

a = {3, 6, 9}

if a[0] != 3: fail("a[0] != 3 (${a[0]})")
if a[1] != 6: fail("a[1] != 6 (${a[1]})")
if a[2] != 9: fail("a[2] != 9 (${a[2]})")

a += 12
if a[3] != 12: fail("a[3] != 10 (${a[3]})")
1 += a
if a[0] != 1: fail("a[0] != 1 (${a[0]})")
if a[1] != 3: fail("a[1] != 3 (${a[1]})")
if a[2] != 6: fail("a[2] != 6 (${a[2]})")
if a[3] != 9: fail("a[3] != 8 (${a[3]})")
if a[4] != 12: fail("a[4] != 10 (${a[4]})")

a += 15, 18
if a[5] != 15: fail("a[5] != 15 (${a[5]})")
if a[6] != 18: fail("a[6] != 18 (${a[6]})")
0, 2 += a
if a[0] != 2: fail("a[0] != 2 (${a[0]})")
if a[1] != 0: fail("a[1] != 0 (${a[1]})")
if a[2] != 1: fail("a[2] != 1 (${a[0]})")
if a[3] != 3: fail("a[3] != 3 (${a[1]})")
if a[4] != 6: fail("a[4] != 6 (${a[2]})")
if a[5] != 9: fail("a[5] != 8 (${a[3]})")
if a[6] != 12: fail("a[6] != 10 (${a[4]})")
if a[7] != 15: fail("a[7] != 15 (${a[5]})")
if a[8] != 18: fail("a[8] != 18 (${a[6]})")

// uint64
if b[0] != 1: fail("b[0] != 1 (${b[0]})")
if b[1] != 2: fail("b[1] != 2 (${b[1]})")
if b[2] != 3: fail("b[2] != 3 (${b[2]})")

b[0]++
b[1]+=3
b[2]=b[2]+4

if b[0] != 2: fail("b[0] != 2 (${b[0]})")
if b[1] != 5: fail("b[1] != 5 (${b[1]})")
if b[2] != 7: fail("b[2] != 7 (${b[2]})")

b = {3, 6, 9}

if b[0] != 3: fail("b[0] != 3 (${b[0]})")
if b[1] != 6: fail("b[1] != 6 (${b[1]})")
if b[2] != 9: fail("b[2] != 9 (${b[2]})")

b += 12
if b[3] != 12: fail("b[3] != 10 (${b[3]})")
1 += b
if b[0] != 1: fail("b[0] != 1 (${b[0]})")
if b[1] != 3: fail("b[1] != 3 (${b[1]})")
if b[2] != 6: fail("b[2] != 6 (${b[2]})")
if b[3] != 9: fail("b[3] != 8 (${b[3]})")
if b[4] != 12: fail("b[4] != 10 (${b[4]})")

b += 15, 18
if b[5] != 15: fail("b[5] != 15 (${b[5]})")
if b[6] != 18: fail("b[6] != 18 (${b[6]})")
0, 2 += b
if b[0] != 2: fail("b[0] != 2 (${b[0]})")
if b[1] != 0: fail("b[1] != 0 (${b[1]})")
if b[2] != 1: fail("b[2] != 1 (${b[0]})")
if b[3] != 3: fail("b[3] != 3 (${b[1]})")
if b[4] != 6: fail("b[4] != 6 (${b[2]})")
if b[5] != 9: fail("b[5] != 8 (${b[3]})")
if b[6] != 12: fail("b[6] != 10 (${b[4]})")
if b[7] != 15: fail("b[7] != 15 (${b[5]})")
if b[8] != 18: fail("b[8] != 18 (${b[6]})")

// type (reference)
if c[0] != interface: fail("c[0] != interface (${c[0].nameof()})")
if c[1] != struct: fail("c[1] != struct (${c[1].nameof()})")
if c[2] != class: fail("c[2] != class (${c[2].nameof()})")

c[0] = int
c[1] = uint
c[2] = text

if c[0] != int: fail("c[0] != int (${c[0].nameof()})")
if c[1] != uint: fail("c[1] != uint (${c[1].nameof()})")
if c[2] != text: fail("c[2] != text (${c[2].nameof()})")

c = {array, list, map}

if c[0] != array: fail("c[0] != array (${c[0].nameof()})")
if c[1] != list: fail("c[1] != list (${c[1].nameof()})")
if c[2] != map: fail("c[2] != map (${c[2].nameof()})")

c += function
if c[3] != function: fail("c[3] != function (${c[3].nameof()})")
method += c
if c[0] != method: fail("c[0] != method (${c[0].nameof()})")
if c[1] != array: fail("c[1] != array (${c[1].nameof()})")
if c[2] != list: fail("c[2] != list (${c[2].nameof()})")
if c[3] != map: fail("c[3] != map (${c[3].nameof()})")
if c[4] != function: fail("c[4] != function (${c[4].nameof()})")

c += int, uint
if c[5] != int: fail("c[5] != int (${c[5]})")
if c[6] != uint: fail("c[6] != uint (${c[6]})")
word, octet += c
if c[0] != octet: fail("c[0] != octet (${c[0]})")
if c[1] != word: fail("c[1] != word (${c[1]})")
if c[2] != method: fail("c[2] != method (${c[0]})")
if c[3] != array: fail("c[3] != array (${c[1]})")
if c[4] != list: fail("c[4] != list (${c[2]})")
if c[5] != map: fail("c[5] != map (${c[3]})")
if c[6] != function: fail("c[6] != function (${c[4]})")
if c[7] != int: fail("c[7] != int (${c[5]})")
if c[8] != uint: fail("c[8] != uint (${c[6]})")

if result: "tc_list02: OK"
