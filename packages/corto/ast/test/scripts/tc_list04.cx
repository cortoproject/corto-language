// Test various forms of list initializers and assignments
bool result: true
void fail(string msg):
    "tc_list04: FAIL: $msg"
    result = false

// List with integer elementType
list ints: uint32

var ints v0, v1 = ints{0, 1, 2} // Test multiple collection assignments
if v1[0,1,2] != (0,1,2): fail("v1[0,1,2] != 0,1,2 ($v1)") 

var ints v2 = ints{3, 4, 5}
if v2[0,1,2] != (3,4,5): fail("v2[0,1,2] != 3,4,5 ($v2)")

v1 = v2
if v2[0,1,2] != (3,4,5): fail("v1[0,1,2] != 3,4,5 ($v2)")

// List with reference elementType
list refs: object

var refs v3 = refs{null, null, null}
if v3[0,1,2] != (null,null,null): fail("v3[0,1,2] != null,null,null ($v3)")

var refs v4 = refs{ints, refs, list}
if v4[0,1,2] != (ints,refs,list): fail("v4[0,1,2] != ints,refs,list ($v4)")

v3 = v4
if v3[0,1,2] != (ints,refs,list): fail("v3[0,1,2] != ints,refs,list ($v3)")

// List with complex elementType
struct Point::
    x, y: uint32
    
list points: Point

var points v5 = points{{10,20}, {30,40}, {50,60}}
if v5[0,1,2][x,y] != (10,20,30,40,50,60): fail("v5[0,1,2][x,y] != (10,20,30,40,50,60) ($v5)")

var points v6 = points{{70,80},{90,100},{110,120}}
if v6[0,1,2][x,y] != (70,80,90,100,110,120): fail("v6[0,1,2][x,y] != (70,80,90,100,110,120) ($v6)")

v5 = v6
if v5[0,1,2][x,y] != (70,80,90,100,110,120): fail("v5[0,1,2][x,y] != (70,80,90,100,110,120) ($v5)")

// Reference variable
var ints& v7 = ints{0,1,2}
if v7[0,1,2] != (0,1,2): fail("v7[0,1,2] != 0,1,2 ($v7)")

var ints& v8 = v7
if v8[0,1,2] != (0,1,2): fail("v8[0,1,2] != 0,1,2 ($v8)")

v8[0,1,2] = 1, 2, 3
if v8[0,1,2] != (1,2,3): fail("v8[0,1,2] != 1,2,3 ($v8)")
if v7[0,1,2] != (1,2,3): fail("v7[0,1,2] != 1,2,3 ($v7)")

if result: "tc_list04: OK"
